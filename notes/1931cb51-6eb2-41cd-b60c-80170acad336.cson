createdAt: "2018-07-09T05:37:19.487Z"
updatedAt: "2018-07-18T06:06:43.686Z"
type: "MARKDOWN_NOTE"
folder: "78ec2c10b762f941f312"
title: "drools-docs"
content: '''
  ## drools-docs
  
  ### 1. Introduction
  KIE (Knowledge Is Everything)는 우리의 관련 기술을한데 모으기 위해 도입 된 우산 프로젝트입니다. 
  KIE는 비즈니스 자동화 및 관리를위한 완벽한 솔루션 포트폴리오를 제공하는 다음과 같이 다르지만 관련 프로젝트를 포함합니다.
  
  * Drools
  Drools는 비즈니스 규칙 및 복잡한 이벤트 처리를 빠르고 안정적으로 평가할 수 있도록하는 forward-chaining 및 backward-chaining 추론 기반 규칙 엔진이있는 비즈니스 규칙 관리 시스템입니다. 규칙 엔진은 인공 지능에서 인간 전문가의 의사 결정 능력을 모방하는 컴퓨터 시스템 인 전문가 시스템을 만드는 기본 구성 요소입니다.
  
  * jBPM
  jBPM은 유연한 비즈니스 프로세스 관리 제품군으로 이러한 목표를 달성하기 위해 실행해야 할 단계를 설명함으로써 비즈니스 목표를 모델링 할 수 있습니다.
  
  * OptaPlanner
  OptaPlanner는 직원 로스터 링, 차량 라우팅, 작업 할당 및 클라우드 최적화와 같은 사용 사례를 최적화하는 구속력 해결사입니다.
  
  * Drools Workbench
  Drools Workbench는 사용자 정의 비즈니스 규칙 및 프로세스의 시각적 구성을위한 완벽한 기능의 웹 응용 프로그램입니다.
  
  * UberFire
  UberFire는 Eclipse Rich Client Platform에서 영감을 얻은 웹 기반 워크 벤치 프레임 워크입니다.
  
  ##### 1.3.1.1 Dependencies and JARs
  Drools는 몇 가지 모듈로 나뉘며, 일부는 규칙 개발 / 컴파일 중에 필요하며 일부는 런타임에 필요합니다.
  
  ##### 1.3.1.3 Runtime
  여기서 언급 한 "런타임"요구 사항은 규칙을 이진 형식 (KnowledgePackage 객체 또는 KnowledgeBase 객체 등)으로 배포하는 경우입니다. 이 옵션은 런타임을 매우 가벼운 상태로 유지할 수 있도록하는 선택적 기능입니다. 당신은 drools-compiler를 사용하여 "out of process"규칙 패키지를 생성 한 다음 런타임 시스템에 배포 할 수 있습니다. 이 런타임 시스템은 drools-core.jar 및 knowledge-api 만 실행하면됩니다. 이는 선택적인 배치 패턴이며, 많은 사람들이 응용 프로그램을이 정도 "트림"할 필요는 없지만 특정 환경에서는 이상적인 옵션입니다.
  
  ##### 1.3.1.4. Installing IDE (Rule Workbench)
  
  * Installing GEF (a required dependency)
  GEF는 Eclipse 그래픽 편집 프레임 워크로 플러그인의 그래프보기 구성 요소에 사용됩니다.
  Open the Help→Software updates… →Available Software→Add Site… from the help menu. Location is:
  http://download.eclipse.org/tools/gef/updates/releases/
  
  * Installing GEF from zip file
  
  * Installing Drools plug-in from zip file
  Download the Drools Eclipse IDE plugin from the link below.
  https://www.drools.org/download/download.html
  
  * Drools Runtimes
   Drools 런타임은 Drools 프로젝트 JAR의 특정 릴리스를 나타내는 파일 시스템의 JAR 모음입니다. 런타임을 만들려면 IDE에서 원하는 릴리스를 가리켜 야합니다. 플러그인 자체에 포함 된 최신 Drools 프로젝트 JAR을 기반으로 새로운 런타임을 만들고 싶다면 쉽게 할 수 있습니다. Eclipse 작업 공간에 기본 Drools 런타임을 지정해야하지만 각각의 개별 프로젝트가 기본값을 대체하고 해당 프로젝트의 적절한 런타임을 구체적으로 선택할 수 있습니다.
  
  Eclipse > Preference > Drools > Installed Drools Runtime 에 지정.
  
  #### 1.3.3. Eclipse
  
  ### 2. Release Note
  ### 3. Compatibility matrix (호환성 매트릭스)
  * KIE (Knowledge Is Everything)
  KIE는 Drools 및 jBPM의 공유 코어입니다. 리소스 구축, 배포 및 활용을위한 통일된 방법론 및 프로그래밍 모델을 제공합니다.
  
  ### 4. KIE
  #### 4.1 Overview
  KIE currently consists of the following subprojects:
  
  ##### - Anatomy of Projects
  ￼￼![kie.png](https://docs.jboss.org/drools/release/7.7.0.Final/drools-docs/html_single/KIE/Overview/kie.png)
  
  지역 검색 및 최적화 도구 인 OptaPlanner는 Drools Planner에서 분리되어 현재 Drools 및 jBPM의 최상위 프로젝트입니다. Optaplanner는 강력한 Drools 통합을 보유하고 있지만 Drools와는 오랫동안 독립적이었습니다.
  
  Polymita 인수에서 다른 것들과 함께 강력한보고 기능을 제공하는 강력한 Dashboard Builder가 제공됩니다. Dashboard Builder는 현재 임시 이름이며 6.0 릴리스 이후에 새로운 이름이 선택됩니다. 대시 보드 빌더는 Drools와 jBPM에 완전히 의존하지 않으며 JBoss의 많은 프로젝트에서 사용되고 JBoss 외부에서 사용됩니다. :)
  
  6.0에서 Guvnor의 초점은 웹 기반 IDE를 빌드하기위한 기초를 제공하는 UberFire 플러그인 세트를 캡슐화하기 위해 좁혀졌습니다. 빌드 및 배포를위한 Maven 통합,받은 편지함을 통한 Maven 저장소 및 활동 알림 관리 등. Drools와 jBPM은 Uberfire를 기본으로 사용하고 Guvnor와 같은 플러그인 세트와 함께 의사 결정 테이블, 지침 편집기, BPMN2 디자이너, 휴먼 타스크와 같은 것들을위한 플러그인을 포함하여 워크 벤치 배포판을 빌드합니다. Drools 워크 벤치는 Drools-WB라고합니다. KIE-WB는 모든 Guvnor, Drools 및 jBPM 플러그인을 결합한 uber 워크 벤치입니다. jBPM-WB는 KIE-WB에 의해 실제로 존재하지 않으므로 고스트가 제거됩니다.
  
  ##### - Lifecycles
  - Author: UI 메타포 (예 : DRL, BPMN2, 의사 결정 테이블, 클래스 모델)를 사용하여 지식을 제작합니다.
  - Build: 제작 된 지식을 배포 가능한 단위로 작성합니다.
  - Test: 응용 프로그램에 배포되기 전에 KIE 지식을 테스트하십시오.
  - Deploy: 응용 프로그램이 활용할 수있는 위치에 장치를 배치합니다.
  - Utilze: 응용 프로그램과 상호 작용할 수있는 KIE 세션 (KieSession)을 제공하기위한 JAR로드 -> KIE는 런타임시 KIE 컨테이너 (KieContainer)를 통해 JAR을 노출합니다. -> KieSession은 런타임과 상호 작용하기 위해 KieContainer에서 생성됩니다.
  - Run: API를 통해 KieSession과 시스템 상호 작용.
  - Work: 명령 줄 또는 UI를 통해 KieSession과 사용자 상호 작용
  - Manage: Manage any KieSession or KieContainer.
  
  #### 4.2 Build, Deploy, Utilize and Run
  
  ### 5. Hybrid Reasoning (추론)
  #### 5.1 Artificial Intelligence
  ##### 5.1.1 A Little History
  그러나 연구 기금이 말라 버렸고 AI라는 용어가 덜 사용되는 동안, 많은 녹색 싹이 심어졌으며,인지 시스템, 기계 학습, 지능 시스템, 지식 표현 및 추론과 같은 분야별 명칭 아래 조용히 계속되었습니다. 그 후 이들의 파생물이 BRMS (Business Rules Management System) 시장의 전문가 시스템과 같은 상용 시스템으로 진출했습니다.
  
  ##### 5.1.2 Knowledge Representation and Reasoning
  KRR은 상징적 인 형태로 우리의 지식을 표현하는 방식에 관한 것입니다. 추론은이 지식을 사용하여 생각하는 행동에 대해 어떻게 생각하는지에 대한 것입니다. C ++, Java 및 C #과 같은 시스템 기반 객체 지향 언어에는 모델링 된 엔터티의 구성 및 동작을 설명하는 클래스라는 데이터 정의가 있습니다. Java에서는 이러한 설명 된 bean 또는 인스턴스의 모범을 호출합니다.
  그러나 이러한 분류 시스템은 계산 효율성을 보장하기 위해 제한됩니다. 수년에 걸쳐 연구원은 우리의 세계를 대표하는 점점 더 정교한 방법을 개발해 왔습니다. 많은 사람들이 이미 OWL (Web Ontology Language)에 대해 들어봤을 것입니다. 이론적으로 표현할 수있는 것과 실제적으로 적시에 계산에 사용할 수있는 것 사이에는 항상 간격이 있기 때문에 OWL은 Lite에서 Full까지 다른 하위 언어를 사용합니다. 어떤 추론 시스템이 OWL Full을 지원할 수 있다고 믿는 것은 아닙니다. 그러나 알고리즘의 발전은 이러한 차이를 좁히고 추론 엔진에서 사용할 수있는 표현력을 향상시킵니다.
  
  또한 이러한 시스템이 어떻게 사고에 영향을 미치는지에 대한 많은 접근법이 있습니다. 리디렉션 및 데이터 기반의 순방향 체인의 장점을 수동 및 쿼리 기반의 백 워드 체인과 비교하는 토론을 들었을 수 있습니다. 많은 다른 유형의 추론 기술이 존재합니다. 각각의 기술은 우리가 선언적으로 해결할 수있는 문제의 범위를 확대합니다. 불완전한 추리 (퍼지 논리, 확실성 요인), 결정할 수없는 논리, 신념 체계, 시간적 추론 및 상관 관계. Drools를 이해하고 사용하려면이 모든 용어를 이해할 필요가 없습니다. 연구 주제의 범위에 대한 아이디어를 제공하기위한 것일뿐입니다. 연구 주제는 실제로 훨씬 광범위하며 연구자가 새로운 경계를 확장함에 따라 계속해서 커집니다.
  
  KRR은 종종 인공 지능의 핵심으로 불립니다. 뇌를 모델링하고 생각보다 패턴 인식에 관한 신경망과 같은 생물학적 접근법을 사용할 때조차도 그들은 KRR 이론에 기초합니다.
  
  ##### 5.1.3 Rule Engines and Production Rule Systems (PRS)
  룰 엔진은 개발자에게 KRR 기능을 제공하는 컴퓨터 프로그램입니다. 높은 수준에는 세 가지 구성 요소가 있습니다.
  * Ontology
  * Rules
  * Data
  
  앞서 언급했듯이 온톨로지는 우리가 "사물"에 사용하는 표현 모델입니다. 레코드 나 Java 클래스 또는 본격적인 OWL 기반 온톨로지를 사용할 수 있습니다. 규칙은 추론을 수행합니다. 즉, "사고"를 촉진합니다. 규칙과 온톨로지의 구별은 OWL 기반 온톨로지와 약간 섞여있다.
  
  "규칙 엔진"이라는 용어는 어떤 형태로든 결과를 산출하기 위해 데이터에 적용 할 수있는 규칙을 사용하는 모든 시스템이 될 수 있다는 점에서 매우 모호합니다. 여기에는 양식 유효성 검사 및 동적 표현 엔진과 같은 간단한 시스템이 포함됩니다. Malcolm Chisholm이 쓴 "비즈니스 규칙 엔진을 만드는 방법"(2004)은 이러한 모호함의 실례입니다. 이 책은 실제로 유효성 검사 규칙을 보관할 데이터베이스 스키마를 작성하고 변경하는 방법에 관한 것입니다. 그런 다음 해당 유효성 검사 규칙에서 Visual Basic 코드를 생성하여 데이터 입력의 유효성을 검사하는 방법을 보여줍니다. 완벽하게 유효하지만 이것은 우리가 이야기하는 것과는 매우 다릅니다.
  
  프로덕션 규칙은 두 부분으로 구성된 구조입니다. 엔진은 프로덕션 규칙 (프로덕션 또는 단순한 규칙이라고도 함)에 대한 사실과 데이터를 일치시켜 결과로 작업을 유도합니다.
  
      when
          <conditions>
      then
          <actions>;
      
  Drools 5.x는 Rete 알고리즘을 구현하고 확장합니다. 
  
  규칙은 생산 메모리에 저장되며 추론 엔진과 일치하는 사실은 작업 메모리에 보관됩니다. 사실은 워킹 메모리에 나타나며, 워킹 메모리에서는 수정되거나 취소 될 수 있습니다. 다수의 규칙과 사실을 가진 시스템은 동일한 사실 주장에 대해 많은 규칙이 적용될 수 있습니다. 이 규칙들은 갈등에 빠져 있다고한다. Agenda는 Conflict Resolution 전략을 사용하여 이러한 충돌 규칙의 실행 순서를 관리합니다.
  
  ![rule-engine-inkscape.png](https://docs.jboss.org/drools/release/7.7.0.Final/drools-docs/html_single/HybridReasoning/rule-engine-inkscape.png)
  **Fig. High-level View of a Production Rule System**
  
  ##### 5.1.4 Hybrid Reasoning Systems (HRS)
  전방 체인은 "데이터 중심"이므로 작업 메모리에 사실이 명시되어 반동적으로 작용하여 하나 이상의 규칙이 동시에 사실이며 Agenda에 의해 실행되도록 예약됩니다. 간단히 말해서, 우리는 사실로 시작합니다, 그것은 규칙을 통해 전파되며, 우리는 결론으로 끝납니다.
  
  역방향 연결은 "목표 중심"입니다. 즉, 엔진이 만족 시키려고하는 결론부터 시작합니다. 그것이 가능하지 않다면 만족할 수있는 결론을 찾는다. 이것들은 현재 목표의 미지의 부분을 충족시키는 데 도움이되는 부 목적으로 알려져 있습니다. 초기 결론이 입증되거나 더 이상 부 골재가 없을 때까지이 과정을 계속 진행합니다. Prolog는 Backward Chaining 엔진의 한 예입니다. Drools는 파생어 쿼리라고도하는 역방향 연결을 수행 할 수 있습니다.
  
  요즘에는 많은 최신 시스템이 두 가지 유형의 추론 기능을 제공합니다. 추론 기술의 다른 유형도 많이 있으며, 각각의 기술은 우리가 선언적으로 해결할 수있는 문제의 범위를 확대합니다. 불완전한 추리 (퍼지 논리, 확실성 요인), 결정할 수없는 논리, 신념 체계, 시간적 추론 및 상관 관.
  
  Drools는 현재 선명한 추론을 제공하지만 불완전한 추론은 거의 준비가되었습니다. 처음에는 퍼지 논리가있는 불완전한 추론이 될 것입니다. 나중에 다른 유형의 불확실성에 대한 지원을 추가 할 것입니다. OWL에 기반한 온톨로지 적 추론을 가져 오는 작업도 진행 중이며, 이는 우리의 특성 시스템과 통합 될 것입니다. 우리는 또한 기능적 프로그래밍 기능을 지속적으로 개선하고 있습니다.
  
  ##### 5.1.5 Expert Systems
  
  #### 5.2 Rete Algorithm
  Rete 알고리즘은 규칙(rule) 엔진에서 규칙을 더 빠른 속도로 패턴 매칭하기 위한 그래프 기반의 알고리즘.규칭긔 조건문들을 그래프의 노드들로 구성하여 관리하고 조건문에 매칭된 결과들을 그래프 노드들로 관리해 나가기에 빠르게 패턴 매칭이 가능하다.
  
  라틴어로 "rete"는 "net"또는 "network"를 의미합니다. Rete 알고리즘은 규칙 편집/컴파일(Rule compilation)과 런타임 실행(Runtime execution)의 두 부분으로 나눌 수 있습니다.
  
  Compilation 알고리즘은 효율적인 식별 네트워크를 생성하기 위해 프로덕션 메모리의 규칙을 처리하는 방법을 설명합니다. 기술적이지 않은 용어로, 판별 네트워크는 데이터가 네트워크를 통해 전파 될 때 데이터를 필터링하는 데 사용됩니다. 네트워크 상단의 노드는 여러 개의 일치 항목을 갖게되며 네트워크가 아래로 가면 일치 항목 수가 줄어들게됩니다. 네트워크 맨 아래에는 터미널 노드가 있습니다. Dr. Forgy의 1982 년 논문에서 그는 루트, 1 입력, 2 입력 및 터미널의 4 가지 기본 노드를 설명했습니다.
  ![Rete_Nodes.png](https://docs.jboss.org/drools/release/7.7.0.Final/drools-docs/html_single/HybridReasoning/Rete_Nodes.png)
  **Fig. Rete Nodes**
  
  루트 노드는 모든 개체가 네트워크에 들어오는 곳입니다. 거기에서 즉시 ObjectTypeNode로 이동합니다. ObjectTypeNode의 목적은 엔진이 필요한 것보다 많은 작업을 수행하지 않도록하는 것입니다. 예를 들어 계정 및 주문이라는 두 개의 개체가 있다고 가정 해보십시오. 룰 엔진이 모든 오브젝트에 대해 모든 단일 노드를 평가하려고하면 많은 사이클을 낭비하게됩니다. 효율적인 작업을 위해 엔진은 객체 유형과 일치하는 노드에만 객체를 전달해야합니다. 이를 수행하는 가장 쉬운 방법은 ObjectTypeNode를 작성하고 모든 1- 입력 및 2- 입력 노드가 그로부터 내려 오는 것입니다. 이렇게하면 응용 프로그램이 새 Account를 선언하면 Order 객체의 노드로 전달되지 않습니다. Drools에서 객체가 선언되면 객체의 Class에서 HashMap의 조회를 통해 유효한 ObjectTypesNodes 목록을 검색합니다. 이리스트가 존재하지 않는 경우, 모든 ObjectTypeNode를 스캔 해리스트에 캐쉬하는 유효한 일치를 찾습니다. 이렇게하면 Drools가 instanceof check와 일치하는 모든 Class 유형과 일치 할 수 있습니다.
  
  ObjectTypeNodes는 AlphaNodes, LeftInputAdapterNodes 및 BetaNodes에 전파 할 수 있습니다. AlphaNode는 리터럴 조건을 평가하는 데 사용됩니다. 1982 년 논문은 평등 조건만을 다룰지라도, 많은 RETE 구현은 다른 연산을 지원한다. 예를 들어, Account.name == "Mr Trout"은 리터럴 조건입니다. 룰에 단일 오브젝트 유형에 대한 여러 개의 리터럴 조건이 있으면 함께 링크됩니다. 즉, 응용 프로그램이 Account 객체를 선언하면 다음 AlphaNode로 진행하기 전에 먼저 첫 번째 리터럴 조건을 충족시켜야합니다. Forgy 박사 논문에서 이들은 IntraElement 조건으로 언급합니다. 다음 다이어그램은 Cheese (name == "cheddar", strength == "strong")에 대한 AlphaNode 조합을 보여줍니다.
  
  ![Alpha_Nodes.png](https://docs.jboss.org/drools/release/7.7.0.Final/drools-docs/html_single/HybridReasoning/Alpha_Nodes.png)
  **Fig. AlphaNodes**
  
  Drools는 해싱을 사용하여 ObjectTypeNode에서 AlphaNode 로의 전파를 최적화하여 Rete를 확장합니다. AlphaNode가 ObjectTypeNode에 추가 될 때마다 값으로 AlphaNode가있는 HashMap에 리터럴 값을 키로 추가합니다. 새로운 인스턴스가 각 AlphaNode로 전달되는 것이 아니라 ObjectType 노드에 들어가면 대신 HashMap에서 올바른 AlphaNode를 검색하여 불필요한 리터럴 검사를 피할 수 있습니다.
  
  #### 5.3 ReteOO Algorithm
  #### 5.4 PHREAK Algorithm
  
  ### 6. User Guide
  #### 6.1 The Basics
  ##### 6.1.1 Stateless Knowledge Session
  유추를 사용하지 않는 Stateless 세션은 가장 간단한 use case로 구성됩니다. Stateless 세션은 일부 데이터를 전달한 다음 일부 결과를 다시 받는 함수처럼 호출 할 수 있습니다.
  일반적은 사용 사례는 다음과 같고, 이에 국한되지 않는다.
  * Validation
    * Is this person eligible for a mortgage?
  
  * Calculation
    * Compute a mortgage premium.
  
  * Routing and Filtering
    * Filter incoming messages, such as emails, into folders.
    * Send incoming messages to a destination.
  
  예제. 운전 면허 애플리케이션
  
      public class Applicant {
          private String name;
          private int age;
          private boolean valid;
          // getter and setter methods here
      }
  나이 제한 룰: 18 미만는 유효하지 않음. 
  
      package com.company.license
  
      rule "Is of valid age"
      when 
          $a : Applicant( age < 18 )
      then
          $a.setValid( false );
      end
  
  삽입된 인스턴스가 오브젝트 타입의 제한(constraint) 조건과 모든 필드 제한 조건을 모두 충족시키면 일치한다고 합니다. 삽입된 데이터와 패턴을 일치시키는 프로세스는 패턴 매칭이라고도 합니다.
  
  Kie세션을 만들고 테스트.
  
      KieServices kieServices = KieServices.Factory.get();
      KieContainer kContainer = kieServices.getKieClasspathContainer();
      
      StatelessKieSession kSession = kContainer.newStatelessKieSession();
      Applicant applicant = new Applicant( "Mr John Smith", 16 );
      assertTrue( applicant.isValid() );
      ksession.execute( applicant );
      assertFalse( applicant.isValid() );
      
  ##### 6.1.2 Stateful Knowledge Session
  Stateful Session은 오랫동안 존재하며 시간이 지남에 따라 반복적인 변경이 가능합니다. Stateful Session의 일반적인 사용 사례는 다음과 같으나 이에 국한되지 않습니다.
  
  * Monitoring: Stock market monitoring and analysis for semi-automatic buying.
  * Diagnostics: Fault finding, medical diagnostics(진단법)
  * Logistics: Parcel tracking and delivery provisioning
  * Compliance: Validation of legality for market trades.
  
  KieSession은 StatelessKieSession과 같은 BatchExecutor 인터페이스도 지원합니다. 유일한 차이점은 Stateful Session의 끝에 FireAllRules 명령이 자동으로 호출되지 않는다는 것입니다.
  
  > 방에 불이 났을 경우 처리하는 예제.
  > 
  ##### 6.1.3 Method vs Rules
  * Methods are called directly.
  * Specific instances are passed.
  * One call results in a single execution.
  * Rules execute by matching against any data as long it is inserted into the engine.
  * Rules can never be called directly.
  * Specific instances cannot be passed to a rule.
  * Depending on the matches, a rule may fire once or several times, or not at all.
  
  #### 6.2 Execution Control
  ##### 6.2.1 Agenda
  Agenda는 Rete 기능입니다. 그것은 실행할 수있는 규칙 집합을 유지 관리하며, 그 작업은 결정적 순서로 실행을 예약하는 것입니다.
  
  RuleRuntime에 대한 작업 중에 규칙이 완전히 일치하여 실행 대상이 될 수 있습니다. 단일 규칙 런타임 액션은 여러 개의 적합한 규칙을 초래할 수 있습니다. 규칙이 완전히 일치하면 규칙 일치가 만들어지며 규칙과 일치하는 사실이 참조되어 Agenda에 배치됩니다. Agenda는 Conflict Resolution 전략을 사용하여 이러한 일치의 실행 순서를 제어합니다.
  
  ##### 6.2.2 Rule Matches and Conflict Sets
  ###### 6.2.2.1 Cashflow Example
  ###### 6.2.2.2. Conflict Resolution
  ###### 6.2.2.3. Salience
  ###### 6.2.2.4. Agenda Groups
  
  
  #### 6.3 Inference
  
  #### 6.4 Truth Maintenance with Logical Objects
  A "insertLogical" is part of the Drools Truth Maintenance System (TMS). 
  ##### 6.4.1.2. Important note: Equality for Java objects
  As the truth maintenance system needs to know when two different physical objects are equal in value, both equals and hashCode must be overridden correctly, as per the Java standard.
  
  #### 6.5 Decision Tables in Spreadsheets
  의사 결정 테이블은 조건부 논리를 나타내는 "정확하면서도 컴팩트 한"(위키 백과 참조) 방법으로 비즈니스 수준 규칙에 매우 적합합니다.
  
  ##### 6.5.1. When to Use Decision Tables
  룰 템플리트 및 데이터로 표현 될 수있는 룰이 존재할 경우 의사 결정 테이블을 조치 과정으로 간주하십시오. 의사 결정 테이블의 각 행은 룰을 생성하기 위해 템플리트와 결합 된 데이터를 제공합니다.
  
  ##### 6.5.2 Overview
  Decision tables are essentially a tool to generate DRL rules automatically.
  
  ##### 6.5.3. How Decision Tables Work
  명심해야 할 핵심 사항은 의사 결정 테이블에서 각 행은 규칙이고 해당 행의 각 열은 해당 규칙에 대한 조건 또는 동작 중 하나입니다.
  
  
  
  #### 6.6 Logging
  
  ### 7. Running
  
  #### 7.7 Commands and the CommandExecutor
  
  BatchExecutionHelper는 위에 표시된 것처럼 결과 XML을 메시지 형식으로 사용할 수있는 배치 실행의 정렬을 지원하도록 구성된 XStream 인스턴스를 제공합니다. 구성된 변환기는 Command Factory를 통해 지원되는 명령에 대해서만 존재합니다. 사용자는 사용자 개체에 대해 다른 변환기를 추가 할 수 있습니다. 이는 특히 서비스가 관련 될 때 Stateless 또는 Stateful 지식 세션 스크립팅에 매우 유용합니다.
  
  ### 8. Rule Language Reference
  Rule 언어 문법
  
  ### 9. Complex Event Processing
  
  ### 10. Decision Model and Notation
  [Decision Model and Notation Ver1.1](https://www.omg.org/spec/DMN/1.1)
  
  ##### 10.1.1 Conformance Levels
  * Conformance Level 1
  의사 결정 요구 사항 다이어그램, 의사 결정 논리 및 의사 결정 테이블을 지원하려면 적합성 수준 1 구현이 필요하지만이 모델은 실행 가능할 필요가 없습니다. 자연스럽고 구조화되지 않은 언어를 비롯하여 모든 언어를 사용하여 표현식을 정의 할 수 있습니다.
  
  * Conformance Level 2
  적합성 수준 2 구현은 적합성 수준 1과 동일하게 지원해야하지만 사양은 9 장에 정의 된 S-FEEL (Simplified FEEL) 언어를 사용하여 작성되어야하며 모델은 완전히 실행 가능해야합니다.
  
  * Conformance Level 3
  적합성 수준 3 구현은 적합성 수준 2와 동일하게 지원해야하지만 사양 10 장에 정의 된대로 full FEEL 언어를 사용하여 표현할 수 있습니다. 구현은 박스형 표현의 전체 집합을 지원하고 완전히 실행 가능해야합니다.
  
  #### 10.3. Executing DMN services remotely on the Kie Server
  이 절에서는 Kie 컨테이너에서 사용할 수있는 DMN 모델에 대한 의사 결정 서비스를 실행하기 위해 Kie 실행 서버에 배포 된 Kie 컨테이너와 상호 작용하는 방법을 설명합니다.
  > Prerequisites
  > 
  - Kie Execution Server installed and configured
  - Kie Execution Server에 배포 된 Kie 컨테이너 - 실행될 DMN 모델이 포함 된 KJAR 용
  - 관련 Kie 실행 서버에 연결된 Kie Server Java 클라이언트
  
  > Procedure
  > 
  1. 관련 Kie 실행 서버에 연결된 Kie Server Java 클라이언트에서 DMNServicesClient 가져 오기
  
  
      DMNServicesClient dmnClient = kieServicesClient.getServicesClient( DMNServicesClient.class );
  
  2. Execute the decision services for the desired model
  
  
      DMNContext dmnContext = dmnClient.newContext();
      dmnContext.set( "Full Name", "John Doe" ); 
      ServiceResponse<DMNResult> serverResp = dmnClient.evaluateAll($containerId, 
          $modelnamespace, $modelname,
          dmnContext);
      DMNResult dmnResult = serverResp.getResult(); 
  
  여기서 $ containerId는 DMN 모델이 포함 된 kjar이 배포 된 컨테이너의 ID이고 $ modelnamespace는 모델의 네임 스페이스이며 $ modelname은 모델의 이름입니다.
  
  이 시점에서 dmnResult에는 평가 된 DMN 모델의 모든 결정 결과가 포함됩니다.
  
  > Related Information
  > 
  - Installing the KIE Server. Ref. Installing the KIE Server
  - Creating a Kie Container. Ref. Creating a Kie Container
  - Kie Server Java Client API, describes also the required dependencies. Ref. Kie Server Java Client API
  - Available Clients for the Decision Server. Ref. Available Clients for the Decision Server
  
  #### 10.4. FEEL Language Reference
  FEEL: Friendly Enough Expression Language
  스프레드 시트에서 표현식을 작성할 수있는 모든 사용자는 FEEL 표현식을 쉽게 작성할 수 있습니다.
  
  ##### 10.4.1. FEEL Language Semantics
  ###### 10.4.1.1. Variable and Function Names
  FEEL과 전통 언어의 가장 큰 차이점 중 하나는 FEEL의 변수 및 함수 이름의 일부로 공백과 일부 특수 문자를 지원한다는 것입니다.
  
  ### 12. Drools Commands
  
  
  ### 13. CDI (Context Dependency Injection)
  #### 13.1 Introduction
  CDI, Contexts 및 Dependency Injection은 응용 프로그램에 선언적 컨트롤 및 구조체를 제공하는 Java 사양입니다. KIE는 프로그램 API를 사용할 필요없이 자동으로 인스턴스화하고 바인딩 할 수 있습니다.
  
  #### 13.2 Annotations
  ##### 13.2.1 @KReleaseId
  인스턴스를 특정 버전의 KieModule에 바인딩하는 데 사용됩니다. kie-ci가 클래스 경로에 있으면 원격 저장소에서 다운로드하여 종속성을 자동으로 해결합니다.
  
  ##### 13.2.2 @KContainer
  @KContainer는 @Inject 및 변수 유형 유추를 사용하여 감지하고 추가 할 수 있으므로 선택 사항입니다.
  * Injects Classpath KieContainer 
   
   
      @Inject
      private KieContainer kContainer;    
  
  * Injects KieContainer for Dynamic KieModule
   
   
      @Inject
      @KReleaseId(groupId = "jar1", artifactId = "art1", version = "1.1")
      private KieContainer kContainer;
  
  * Injects named KieContainer for Dynamic KieModule
  
  
      @Inject
      @KContainer(name = "kc1")
      @KReleaseId(groupId = "jar1", artifactId = "art1", version = "1.1")
      private KieContainer kContainer;
      
  ##### 13.2.3. @KBase
  @KBase는 @Inject 및 변수 유형 유추를 사용하여 감지하고 추가 할 수 있으므로 선택 사항입니다.
  
  ##### 13.2.4 @KSession for KieSession
  @KSession는 @Inject 및 변수 유형 유추를 사용하여 감지하고 추가 할 수 있으므로 선택 사항입니다.
  
  The default argument, if given, maps to the value attribute and specifies the name of the KieSession from the kmodule.xml file
  
  * Side by side version loading for 'jar1.KBase1' KieBase
  
  
      @Inject
      @KSession("ksession1")
      @KReleaseId( groupId = "jar1", artifactId = "art1", version = "1.0")
      private KieSession ksessionv10;
  
      @Inject
      @KSession("ksession1")
      @KReleaseId( groupId = "jar1", artifactId = "art1", version = "1.1")
      private KieSession ksessionv11;
  
  * CDI example for a named KieSession
  
  
      @Inject
      @KSession("ksession1")
      KieSession kSession;
  
      public void go(PrintStream out) {
          kSession.setGlobal("out", out);
          kSession.insert(new Message("Dave", "Hello, HAL. Do you read me, HAL?"));
          kSession.fireAllRules();
      }
  
  ### 14. Integration with Spring
  
  ##### 14.2.7.6. IMPORTANT NOTE
  Annotations 이 사용되는 경우, kmodule 객체 (kbase / ksession)를 적절하게 초기화하려면 org.kie.spring.annotations.KModuleAnnotationPostProcessor 유형의 bean을 정의해야합니다
  
  * kie-spring annotations post processor bean definition
  
  
      <bean id="kiePostProcessor" class="org.kie.spring.annotations.KModuleAnnotationPostProcessor"/>
  
  * kie-spring annotations - Component Scanning
  
  
      <context:component-scan base-package="org.kie.spring.annotations"/>
  
  #### 14.2.8 Event Listeners
  Drools supports adding 3 types of listeners to KieSessions - AgendaListener, WorkingMemoryListener, ProcessEventListener
  
  The kie-spring module allows you to configure these listeners to KieSessions using XML tags. These tags have identical names as the actual listener interfaces i.e., <kie:agendaEventListener..>, <kie:ruleRuntimeEventListener...> and <kie:processEventListener...>.
  
  * Example 198. Listener configuration example - using a bean:ref.
  * Example 199. Listener configuration example - using nested bean.
  * Example 200. Listener configuration example - defaulting to the debugversions provided by the Knowledge-API .
  * Example 201. Listener configuration example - mix and match of’ref'/nested-bean/empty styles.
  * Example 202. Listener configuration example - multiple listeners of thesame type.
  
  #### 14.2.9. Loggers
  Drools supports adding 2 types of loggers to KieSessions - ConsoleLogger, FileLogger.
  
  #### 14.2.10. Defining Batch Commands
  A < kie : batch > element can be used to define a set of batch commands for a given ksession.
  이 태그는 속성이 없으며 <kie : ksession ...> 요소 바로 아래에 있어야합니다. 지원되는 명령은 다음과 같습니다.
  
  #### 14.2.11. Persistence
  
  #### 14.2.12. Leveraging Other Spring Features
  
  ### 14.3. Integration with jBPM Human Task
  이 장에서는 Spring을 사용하여 휴먼 타스크 서버를 구성 할 때 사용되는 infrastructure 에 대해 설명합니다.
  
  
  
  ### 17. Apache Camel Integration
  Camel은 Drools에 정보를 입출력하기위한 경량 버스 프레임 워크를 제공합니다.
  Drools는 쉽게 통합 할 수 있도록 두 가지 요소를 도입했습니다.
  * Drools Policy
  JAXB 또는 XStream 데이터 로더를 확장합니다. JAXB의 경우 컨텍스트 경로와 관련된 drools 관련 경로를 추가합니다. XStream의 경우 Drools 클래스의 사용자 정의 변환기와 별칭을 추가합니다. 또한 ClassLoader를 대상 ksession으로 설정하는 작업도 처리합니다.
  
  * Drools Endpoint
  지정된 drools 세션에 대해 페이로드를 실행합니다.
  
  ### 18. Drools Camel Server
  drools camel server (drools-camel-server) 모듈은 모든 종류의 클라이언트 애플리케이션을 위해 원격으로 KnowledgeBases를 실행하기 위해 배포 할 수있는 war(Web Application Resource or Web application ARchive) 입니다. 이것은 JVM 애플리케이션 클라이언트에 국한되지 않고 REST 인터페이스를 통해 HTTP를 사용할 수있는 모든 기술입니다. 이 버전의 실행 서버는 고유 한 방식으로 상태 비 저장 및 상태 저장 세션을 지원합니다.
  
  ### 20. Workbench (General)
  #### 20.1 Installation
  응용 프로그램 서버에 해당하는 Workbench Distribution Zip의 war를 사용하십시오.
  - eap7: tailored for Red Hat JBoss Enterprise Application Platform 7
  - tomcat8: tailored for Apache Tomcat 8
  - wildfly11: tailored for Wildfly 11
  
  #### 20.2 Quick Start
  
  
  ### 24. KIE Execution Server
  #### 24.1 Overview
  Kie Server는 규칙 및 프로세스를 인스턴스화하고 실행하는 데 사용할 수있는 모듈 식 독립형 서버 구성 요소입니다. REST, JMS 및 Java 인터페이스를 통해 클라이언트 응용 프로그램에이 기능을 제공합니다. 또한 Kie Workbench와 완벽하게 통합됩니다.
  
  
  
'''
tags: []
isStarred: false
isTrashed: false
