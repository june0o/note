createdAt: "2019-01-08T04:51:16.649Z"
updatedAt: "2019-01-08T04:51:35.923Z"
type: "MARKDOWN_NOTE"
folder: "ab773e855a690f040074"
title: "Node.js 기본"
tags: []
content: '''
  ### Node.js 기본
  #### 1. 개요
  - 2009 년에 Ryan Dahl이 만든 프로그래밍 프레임워크
  - 자바스크립트를 사용해 이벤트 기반의 서버 프로그램 작성 가능
  - 구글 크롬에 사용된 V8이라는 자바스크립트 엔진과 libuv를 합친 프레임워크
  - libuv는 비동기 형태로 운영체제의 기능에 접근할 수 있게 해주는 라이브러리
  
  #### 2. 이벤트
      
      const greeter = new events.EventEmitter();
      greeter.on('welcome', function(){
        console.log('hello');
      });
      
      greeter.emit('welcome');
  
  #### 3. 모듈
  : 코드를 작고 이해하기 쉽게 분할할 수 잇고, 코드 재사용이 쉽다.
  작고 이해하기 쉬운 파일들을 하나하나 조립해서 애플리케이션을 만들어 나간다.
  [Nodejs api](https://nodejs.org/api) 참고
  
      // discount.js
      function applyDiscount (code, amount) {
        ...
      }
      
      module.exports = {
        applyDiscount
      };
      
      // test.js 에서 discount 모듈 사용
      const discount = require('./discount');
      discount.applyDiscount(502, 10);
  
  #### 4. 동기와 비동기
  
  예제1. Nodejs를 사용해 동기적으로 폴더 내부의 파일 수 구하기
  
      const fs = require('fs');
      const files = fs.readdirSync('/Users/pauljensen');
      console.log(files.length);
  
  예제2. Nodejs를 사용해 비동기적으로 폴더 내부의 파일 수 구하기
  
      const fs = require('fs');
      const files = fs.readdir('/Users/pauljensen', (err, files) => {
          console.log(files.length);    
      });
  
  #### 5. 스트림
  스트림을 사용하면 많은 양의 데이터를 전송하고 처리할 때 메모리를 크게 절약할 수 있다. 
  텍스트 파일을 chunk 단위로 잘라서 하나하나 읽어 들인 뒤에, 데이터를 처리하는 것이 더 효율적.
  
  
      // * 실행 속도 계산
      // - 코드 시작 시
      const startTime = process.htrime();
      // - 코드 종료 시
      const diff = process.hrtime(startTime);
      console.log('benchmark took %d nanoseconds', diff[0] * 1e9 + diff[1]);
  
      // * 사용 메모리 계산
      console.log(process.memoryUsage())
      // -> 결과
      // {rss: 36184064, heapTotal: 20658336, heapUsed: 16310280}
      
  #### 6. 이벤트
  
      const greeter = new events.EventEmitter();
      
      greeter.on('welcome', function() {
        console.log('hello');
      });
      
      greeter.emit('welcome');
  
  #### 7. 모듈
  Nodejs는 재사용 가능한 코드들을 모듈이라는 기능으로 만들 수 있다.
  
      function applyDiscount (code, amount) {
          // ...
      };
  
      // 함수를 외부에 공개하는 방법
      // 방법1.
      exports.applyDiscount = applyDiscount;
      
      // 방법2. 
      module.exports = {
          applyDiscount: applyDiscount
      };
      
      // 방법3. 파일에서 하나의 함수만 호출할 수 있게 하는 경우.
      module.exports = applyDiscount;
      
  
'''
isStarred: false
isTrashed: false
